{"ast":null,"code":"var _jsxFileName = \"/home/poncho/toto/CODE/react-shopping-cart/src/contexts/cart-context/CartContextProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext(undefined);\n\nconst useCartContext = () => {\n  _s();\n\n  const context = useContext(CartContext);\n\n  if (!context) {\n    throw new Error('useCartContext must be used within a CartProvider');\n  }\n\n  return context;\n};\n\n_s(useCartContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nconst totalInitialValues = {\n  productQuantity: 0,\n  installments: 0,\n  totalPrice: 0,\n  currencyId: 'USD',\n  currencyFormat: '$'\n};\n\nconst CartProvider = props => {\n  _s2();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [products, setProducts] = useState([]);\n  const [total, setTotal] = useState(totalInitialValues);\n  const CartContextValue = {\n    isOpen,\n    setIsOpen,\n    products,\n    setProducts,\n    total,\n    setTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: CartContextValue,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(CartProvider, \"A01GQsEqVvn1fd0oKpbzGcmEcds=\");\n\n_c = CartProvider;\nexport { CartProvider, useCartContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/poncho/toto/CODE/react-shopping-cart/src/contexts/cart-context/CartContextProvider.tsx"],"names":["createContext","useContext","useState","CartContext","undefined","useCartContext","context","Error","totalInitialValues","productQuantity","installments","totalPrice","currencyId","currencyFormat","CartProvider","props","isOpen","setIsOpen","products","setProducts","total","setTotal","CartContextValue"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAwCC,QAAxC,QAAwD,OAAxD;;AAYA,MAAMC,WAAW,gBAAGH,aAAa,CAA2BI,SAA3B,CAAjC;;AACA,MAAMC,cAAc,GAAG,MAAoB;AAAA;;AACzC,QAAMC,OAAO,GAAGL,UAAU,CAACE,WAAD,CAA1B;;AAEA,MAAI,CAACG,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD,CARD;;GAAMD,c;;AAUN,MAAMG,kBAAkB,GAAG;AACzBC,EAAAA,eAAe,EAAE,CADQ;AAEzBC,EAAAA,YAAY,EAAE,CAFW;AAGzBC,EAAAA,UAAU,EAAE,CAHa;AAIzBC,EAAAA,UAAU,EAAE,KAJa;AAKzBC,EAAAA,cAAc,EAAE;AALS,CAA3B;;AAQA,MAAMC,YAAgB,GAAIC,KAAD,IAAW;AAAA;;AAClC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAiB,EAAjB,CAAxC;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAaM,kBAAb,CAAlC;AAEA,QAAMc,gBAA8B,GAAG;AACrCN,IAAAA,MADqC;AAErCC,IAAAA,SAFqC;AAGrCC,IAAAA,QAHqC;AAIrCC,IAAAA,WAJqC;AAKrCC,IAAAA,KALqC;AAMrCC,IAAAA;AANqC,GAAvC;AASA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,gBAA7B;AAAA,OAAmDP;AAAnD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAfD;;IAAMD,Y;;KAAAA,Y;AAiBN,SAASA,YAAT,EAAuBT,cAAvB","sourcesContent":["import { createContext, useContext, FC, useState } from 'react';\nimport { ICartProduct, ICartTotal } from 'models';\n\nexport interface ICartContext {\n  isOpen: boolean;\n  setIsOpen(state: boolean): void;\n  products: ICartProduct[];\n  setProducts(products: ICartProduct[]): void;\n  total: ICartTotal;\n  setTotal(products: any): void;\n}\n\nconst CartContext = createContext<ICartContext | undefined>(undefined);\nconst useCartContext = (): ICartContext => {\n  const context = useContext(CartContext);\n\n  if (!context) {\n    throw new Error('useCartContext must be used within a CartProvider');\n  }\n\n  return context;\n};\n\nconst totalInitialValues = {\n  productQuantity: 0,\n  installments: 0,\n  totalPrice: 0,\n  currencyId: 'USD',\n  currencyFormat: '$',\n};\n\nconst CartProvider: FC = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [products, setProducts] = useState<ICartProduct[]>([]);\n  const [total, setTotal] = useState<ICartTotal>(totalInitialValues);\n\n  const CartContextValue: ICartContext = {\n    isOpen,\n    setIsOpen,\n    products,\n    setProducts,\n    total,\n    setTotal,\n  };\n\n  return <CartContext.Provider value={CartContextValue} {...props} />;\n};\n\nexport { CartProvider, useCartContext };\n"]},"metadata":{},"sourceType":"module"}