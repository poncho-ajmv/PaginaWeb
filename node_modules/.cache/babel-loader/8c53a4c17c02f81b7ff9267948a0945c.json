{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCartContext } from './CartContextProvider';\nimport useCartTotal from './useCartTotal';\n\nconst useCartProducts = () => {\n  _s();\n\n  const {\n    products,\n    setProducts\n  } = useCartContext();\n  const {\n    updateCartTotal\n  } = useCartTotal();\n\n  const updateQuantitySafely = (currentProduct, targetProduct, quantity) => {\n    if (currentProduct.id === targetProduct.id) {\n      return Object.assign({ ...currentProduct,\n        quantity: currentProduct.quantity + quantity\n      });\n    } else {\n      return currentProduct;\n    }\n  };\n\n  const addProduct = newProduct => {\n    let updatedProducts;\n    const isProductAlreadyInCart = products.some(product => newProduct.id === product.id);\n\n    if (isProductAlreadyInCart) {\n      updatedProducts = products.map(product => {\n        return updateQuantitySafely(product, newProduct, newProduct.quantity);\n      });\n    } else {\n      updatedProducts = [...products, newProduct];\n    }\n\n    setProducts(updatedProducts);\n    updateCartTotal(updatedProducts);\n  };\n\n  const removeProduct = productToRemove => {\n    const updatedProducts = products.filter(product => product.id !== productToRemove.id);\n    setProducts(updatedProducts);\n    updateCartTotal(updatedProducts);\n  };\n\n  const increaseProductQuantity = productToIncrease => {\n    const updatedProducts = products.map(product => {\n      return updateQuantitySafely(product, productToIncrease, +1);\n    });\n    setProducts(updatedProducts);\n    updateCartTotal(updatedProducts);\n  };\n\n  const decreaseProductQuantity = productToDecrease => {\n    const updatedProducts = products.map(product => {\n      return updateQuantitySafely(product, productToDecrease, -1);\n    });\n    setProducts(updatedProducts);\n    updateCartTotal(updatedProducts);\n  };\n\n  return {\n    products,\n    addProduct,\n    removeProduct,\n    increaseProductQuantity,\n    decreaseProductQuantity\n  };\n};\n\n_s(useCartProducts, \"DVvRwWQdZsREOCJjX6M7CU2X24o=\", false, function () {\n  return [useCartContext, useCartTotal];\n});\n\nexport default useCartProducts;","map":{"version":3,"sources":["/home/poncho/toto/CODE/react-shopping-cart/src/contexts/cart-context/useCartProducts.ts"],"names":["useCartContext","useCartTotal","useCartProducts","products","setProducts","updateCartTotal","updateQuantitySafely","currentProduct","targetProduct","quantity","id","Object","assign","addProduct","newProduct","updatedProducts","isProductAlreadyInCart","some","product","map","removeProduct","productToRemove","filter","increaseProductQuantity","productToIncrease","decreaseProductQuantity","productToDecrease"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,uBAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAGA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BJ,cAAc,EAAhD;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAsBJ,YAAY,EAAxC;;AAEA,QAAMK,oBAAoB,GAAG,CAC3BC,cAD2B,EAE3BC,aAF2B,EAG3BC,QAH2B,KAIV;AACjB,QAAIF,cAAc,CAACG,EAAf,KAAsBF,aAAa,CAACE,EAAxC,EAA4C;AAC1C,aAAOC,MAAM,CAACC,MAAP,CAAc,EACnB,GAAGL,cADgB;AAEnBE,QAAAA,QAAQ,EAAEF,cAAc,CAACE,QAAf,GAA0BA;AAFjB,OAAd,CAAP;AAID,KALD,MAKO;AACL,aAAOF,cAAP;AACD;AACF,GAbD;;AAeA,QAAMM,UAAU,GAAIC,UAAD,IAA8B;AAC/C,QAAIC,eAAJ;AACA,UAAMC,sBAAsB,GAAGb,QAAQ,CAACc,IAAT,CAC5BC,OAAD,IAA2BJ,UAAU,CAACJ,EAAX,KAAkBQ,OAAO,CAACR,EADxB,CAA/B;;AAIA,QAAIM,sBAAJ,EAA4B;AAC1BD,MAAAA,eAAe,GAAGZ,QAAQ,CAACgB,GAAT,CAAcD,OAAD,IAA2B;AACxD,eAAOZ,oBAAoB,CAACY,OAAD,EAAUJ,UAAV,EAAsBA,UAAU,CAACL,QAAjC,CAA3B;AACD,OAFiB,CAAlB;AAGD,KAJD,MAIO;AACLM,MAAAA,eAAe,GAAG,CAAC,GAAGZ,QAAJ,EAAcW,UAAd,CAAlB;AACD;;AAEDV,IAAAA,WAAW,CAACW,eAAD,CAAX;AACAV,IAAAA,eAAe,CAACU,eAAD,CAAf;AACD,GAhBD;;AAkBA,QAAMK,aAAa,GAAIC,eAAD,IAAmC;AACvD,UAAMN,eAAe,GAAGZ,QAAQ,CAACmB,MAAT,CACrBJ,OAAD,IAA2BA,OAAO,CAACR,EAAR,KAAeW,eAAe,CAACX,EADpC,CAAxB;AAIAN,IAAAA,WAAW,CAACW,eAAD,CAAX;AACAV,IAAAA,eAAe,CAACU,eAAD,CAAf;AACD,GAPD;;AASA,QAAMQ,uBAAuB,GAAIC,iBAAD,IAAqC;AACnE,UAAMT,eAAe,GAAGZ,QAAQ,CAACgB,GAAT,CAAcD,OAAD,IAA2B;AAC9D,aAAOZ,oBAAoB,CAACY,OAAD,EAAUM,iBAAV,EAA6B,CAAC,CAA9B,CAA3B;AACD,KAFuB,CAAxB;AAIApB,IAAAA,WAAW,CAACW,eAAD,CAAX;AACAV,IAAAA,eAAe,CAACU,eAAD,CAAf;AACD,GAPD;;AASA,QAAMU,uBAAuB,GAAIC,iBAAD,IAAqC;AACnE,UAAMX,eAAe,GAAGZ,QAAQ,CAACgB,GAAT,CAAcD,OAAD,IAA2B;AAC9D,aAAOZ,oBAAoB,CAACY,OAAD,EAAUQ,iBAAV,EAA6B,CAAC,CAA9B,CAA3B;AACD,KAFuB,CAAxB;AAIAtB,IAAAA,WAAW,CAACW,eAAD,CAAX;AACAV,IAAAA,eAAe,CAACU,eAAD,CAAf;AACD,GAPD;;AASA,SAAO;AACLZ,IAAAA,QADK;AAELU,IAAAA,UAFK;AAGLO,IAAAA,aAHK;AAILG,IAAAA,uBAJK;AAKLE,IAAAA;AALK,GAAP;AAOD,CAvED;;GAAMvB,e;UAC8BF,c,EACNC,Y;;;AAuE9B,eAAeC,eAAf","sourcesContent":["import { useCartContext } from './CartContextProvider';\nimport useCartTotal from './useCartTotal';\nimport { ICartProduct } from 'models';\n\nconst useCartProducts = () => {\n  const { products, setProducts } = useCartContext();\n  const { updateCartTotal } = useCartTotal();\n\n  const updateQuantitySafely = (\n    currentProduct: ICartProduct,\n    targetProduct: ICartProduct,\n    quantity: number\n  ): ICartProduct => {\n    if (currentProduct.id === targetProduct.id) {\n      return Object.assign({\n        ...currentProduct,\n        quantity: currentProduct.quantity + quantity,\n      });\n    } else {\n      return currentProduct;\n    }\n  };\n\n  const addProduct = (newProduct: ICartProduct) => {\n    let updatedProducts;\n    const isProductAlreadyInCart = products.some(\n      (product: ICartProduct) => newProduct.id === product.id\n    );\n\n    if (isProductAlreadyInCart) {\n      updatedProducts = products.map((product: ICartProduct) => {\n        return updateQuantitySafely(product, newProduct, newProduct.quantity);\n      });\n    } else {\n      updatedProducts = [...products, newProduct];\n    }\n\n    setProducts(updatedProducts);\n    updateCartTotal(updatedProducts);\n  };\n\n  const removeProduct = (productToRemove: ICartProduct) => {\n    const updatedProducts = products.filter(\n      (product: ICartProduct) => product.id !== productToRemove.id\n    );\n\n    setProducts(updatedProducts);\n    updateCartTotal(updatedProducts);\n  };\n\n  const increaseProductQuantity = (productToIncrease: ICartProduct) => {\n    const updatedProducts = products.map((product: ICartProduct) => {\n      return updateQuantitySafely(product, productToIncrease, +1);\n    });\n\n    setProducts(updatedProducts);\n    updateCartTotal(updatedProducts);\n  };\n\n  const decreaseProductQuantity = (productToDecrease: ICartProduct) => {\n    const updatedProducts = products.map((product: ICartProduct) => {\n      return updateQuantitySafely(product, productToDecrease, -1);\n    });\n\n    setProducts(updatedProducts);\n    updateCartTotal(updatedProducts);\n  };\n\n  return {\n    products,\n    addProduct,\n    removeProduct,\n    increaseProductQuantity,\n    decreaseProductQuantity,\n  };\n};\n\nexport default useCartProducts;\n"]},"metadata":{},"sourceType":"module"}